/***
 * A simple observer pattern implementation.
 */
function EventHelper() {
	this.handlers = [];
	
	this.subscribe = function(fn) {
		this.handlers.push(fn);
	}
	
	this.notify = function(args) {
		for (var i = 0; i < this.handlers.length; i++) {
			this.handlers[i].call(this, args);
		}
	}
	
	return this;
}

/***
 * A sample AJAX data store implementation.
 * Right now, it's hooked up to load all Apple-related Digg stories, but can
 * easily be extended to support and JSONP-compatible backend that accepts paging parameters.
 */
function RemoteModel() {
	// private
	var data = {length:0};
	var sortcol = null;
	var sortdir = 1;	
	var h_request = null;
	
	// events
	var onDataLoading = new EventHelper();
	var onDataLoaded = new EventHelper();
	
	
	function init() {
	}
	
	
	function isDataLoaded(from,to) {
		for (var i=from; i<=to; i++) {
			if (data[i] == undefined || data[i] == null)
				return false;
		}
		
		return true;
	}
	
	
	function clear() {
		data = {length:0};
	}


	function ensureData(from,to) {
		if (from < 0)
			from = 0;
		
		while (data[from] != undefined && from < to)
			from++;
			
		while (data[to] != undefined && from < to)
			to--;
			
		if (from == to || isDataLoaded(from,to))
			return;
		
		var url = "http://services.digg.com/stories/topic/apple?offset=" + from + "&count=" + (to-from+1) + "&appkey=http://slickgrid.googlecode.com&type=javascript"
		
		//if (sortcol != null)
		//	url += ("&sort=" + sortcol + "&dir=" + ((sortdir>0)?"ASC":"DESC"));
		
		
		// TODO:  make the request abortable (not supported by jQuery for JSONP)
		
		if (h_request != null) 
			window.clearTimeout(h_request);
		
		h_request = window.setTimeout(function() {
			console.warn("loading...");
			
			onDataLoading.notify({from:from, to:to});
			
			$.ajax({
				type: "GET",
				url: url,
				cache: true, // Digg doesn't accept the autogenerated cachebuster param
				dataType: "jsonp",
				success: _ajaxCallback
				});
		}, 50);
	}
	
	
	function _ajaxCallback(resp) {
		var from = resp.offset, to = resp.offset + resp.count;
		data.length = parseInt(resp.total);
		
		for (var i = 0; i < resp.stories.length; i++) {
			data[from + i] = resp.stories[i];
			data[from + i].index = from + i;
		}
		
		onDataLoaded.notify({from:from, to:to});		
	}
	
	
	function reloadData(from,to) {
		for (var i=from; i<=to; i++)
			delete data[i];
			
		ensureData(from,to);
	}
	
	
	function setSort(column,dir) {
		sortcol = column;
		sortdir = dir;
	}

	init();
	
	return {
		// properties
		"data": data,			
		
		// methods
		"clear": clear,
		"isDataLoaded": isDataLoaded,
		"ensureData": ensureData,
		"reloadData": reloadData,
		"setSort": setSort,

		// events
		"onDataLoading": onDataLoading,
		"onDataLoaded": onDataLoaded
	};
}
